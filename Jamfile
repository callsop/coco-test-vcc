
#################################################################
# common rules
#################################################################

# all configurations to build
CONFIGS = debug release directx opengl dbgaudio logging ;

rule SubDirSetup
{
	# locate output targets for each config
	rule SetLocateTarget cfg
	{
		LOCATE_TARGET on $(cfg) = [ FDirName build $(cfg) $(SUBDIR_TOKENS) ] ;
	}

	ForEachConfig $(CONFIGS) : SetLocateTarget ;

	# reset all subdir options to default
	SUBDIR$(SUBDIRRESET) on $(CONFIGS) = ;
}

SUBDIRRULES = SubDirSetup ;

#################################################################
# vcc build
#################################################################

SubDir TOP ;

# set where the sources are located
SEARCH_SOURCE = VCC ;

# collect the sources
SRCS = [ Glob $(SEARCH_SOURCE) : *.cpp *.rc ] ;

# collect all roms
ROMS = [ Glob roms : *.rom ] ;

# extra includes for vcc
3RDPARTY = [ FDirName VCC 3rdParty ] ;
COMMONLIB = [ FDirName VCC libcommon include ] ;

rule ConfigureBuild
{
	Promote SUBDIRC++FLAGS : $(CONFIGS) ;
	Promote SUBDIRC++FLAGS : directx opengl : release ;
	Promote SUBDIRC++FLAGS : dbgaudio logging : debug ;

	# libraries required
	SubDirLinkLibs kernel32.lib user32.lib gdi32.lib dsound.lib ddraw.lib ;
	SubDirLinkLibs dinput8.lib dxguid.lib winmm.lib shell32.lib comdlg32.lib ;
	SubDirLinkLibs comctl32.lib ;

	Promote SUBDIRLINKFLAGS SUBDIRLINKLIBS : $(CONFIGS) ;

	# configuration specific compilation flags
	ConfigSubDirC++Flags $(CONFIGS) : /I$(3RDPARTY) /I$(COMMONLIB) /D_CRT_SECURE_NO_WARNINGS ;
	ConfigSubDirC++Flags directx : /DUSE_OPENGL=false ;
	ConfigSubDirC++Flags opengl : /DUSE_DIRECTX=false ;
	ConfigSubDirC++Flags dbgaudio : /DUSE_DEBUG_AUDIOTAPE=true ;
	ConfigSubDirC++Flags logging : /DUSE_LOGGING=true ;
}

# copy a rom to the configuration output
rule MakeRom
{
	File $(<) : $(>) ;
	Depends $(<) : $(>) ;
	MakeLocate $(<) : $(LOCATE_TARGET) ;
	Depends roms $(cfg) : $(<) ;
	Clean clean : $(<) ;
}

# process all rom files
rule MakeRoms
{
	local rom ;
	for rom in $(ROMS)
	{
		MakeRom [ FGristFiles $(rom:BS) ] : $(rom) ;
	}
	NotFile roms ;
}

rule MakeExtras cfg
{
    # set sources grist based on config
    local SOURCE_GRIST = $(cfg) ;

	MakeRoms $(cfg) ;
}

# for all other targets they all depend on libcommon
rule BuildExtras target
{
	if $(target:B) != libcommon
	{
		local target = $(target:S=$(SUFEXE)) ;

		local SOURCE_GRIST = [ FGrist libcommon $(cfg) ] ;
		local libtarget = [ FGristFiles libcommon ] ;

		NEEDLIBS on $(target) = $(libtarget:S=.dll) ;
		Depends $(target) : $(libtarget:S=.dll) ;
		Echo Depends $(target) \: $(libtarget:S=.dll) ;
	}
}


SubDirLinkFlags /SUBSYSTEM:WINDOWS ;
ConfigureBuild ;

# build main debug/release versions
ConfigMain $(CONFIGS) : vcc : $(SRCS) ;

# build extras needed
ForEachConfig $(CONFIGS) : MakeExtras ;


rule MakeDllExtras cfg
{
	local SOURCE_GRIST = [ FGrist $(SUBDIR_TOKENS) $(cfg) ] ;

	local target = [ FAppendSuffix [ FGristFiles $(name) ] : $(SUFEXE) ] ;

	SOURCE_GRIST = [ FGrist $(cfg) ] ;

	local out = [ FAppendSuffix [ FGristFiles $(name) ] : $(SUFEXE) ] ;

	File $(out) : $(target) ;
	MakeLocate $(out) : [ FDirName build $(cfg) ] ;
	Depends $(cfg) : $(out) ;
}

rule BuildDll name : shared : libs
{
	SubDir TOP $(name) ;

	local SEARCH_SOURCE = [ FDirName VCC $(name) ] ;
	local SRCS = [ Glob $(SEARCH_SOURCE) : *.c *.cpp *.rc ] ;

	SubDirLinkLibs $(libs) ;
	SubDirLinkFlags /DLL /DYNAMICBASE /SUBSYSTEM:CONSOLE ;
	ConfigureBuild ;

	local SUFEXE = .dll ;

	ConfigMain $(CONFIGS) : $(name) : $(SRCS) ;

	ForEachConfig $(CONFIGS) : MakeDllExtras ;
}

rule BuildCommonDll name : shared : libs
{
	SubDir TOP $(name) ;

	local SRCS = [ GlobRecursive [ FDirName VCC libcommon ] : *.cpp ] ;
	local SEARCH_SOURCE = [ Unique $(SRCS:P) ] ;

	ConfigSubDirC++Flags $(CONFIGS) : /DLIBCOMMON_EXPORTS ;
	SubDirLinkLibs $(libs) ;
	SubDirLinkFlags /DLL /DYNAMICBASE /SUBSYSTEM:CONSOLE ;
	ConfigureBuild ;

	local SUFEXE = .dll ;

	ConfigMain $(CONFIGS) : $(name) : $(SRCS) ;

	ForEachConfig $(CONFIGS) : MakeDllExtras ;
}

BuildCommonDll libcommon ;


#
# Build cart dlls, some require shared sources and additional libraries.
#

BuildDll acia : logger.cpp DialogOps.cpp : ws2_32.lib ;
BuildDll becker : logger.cpp DialogOps.cpp Fileops.cpp : ws2_32.lib ;
BuildDll fd502 : logger.cpp DialogOps.cpp Fileops.cpp : ws2_32.lib ;
BuildDll gmc ;
BuildDll orch90 : Fileops.cpp ;
BuildDll harddisk : DialogOps.cpp Fileops.cpp ;
BuildDll mpi : logger.cpp DialogOps.cpp Fileops.cpp ;
BuildDll ramdisk : logger.cpp DialogOps.cpp Fileops.cpp ;
BuildDll sdc : logger.cpp DialogOps.cpp Fileops.cpp : Shlwapi.lib Ole32.lib ;
BuildDll superide : DialogOps.cpp Fileops.cpp ;


