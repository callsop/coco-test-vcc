#################################################################
# vcc build
#################################################################

SubDir TOP ;

# all configurations to build
CONFIGS = debug release directx opengl dbgaudio logging ;

# locate output targets here
rule SetLocateTarget cfg
{
	LOCATE_TARGET on $(cfg) = [ FDirName build $(cfg) $(SUBDIR_TOKENS) ] ;
}

ForEachConfig $(CONFIGS) : SetLocateTarget ;

# set where the sources are located
SEARCH_SOURCE = VCC ;

# collect the sources
SRCS = [ Glob $(SEARCH_SOURCE) : *.cpp *.rc ] ;

# collect all roms
ROMS = [ Glob roms : *.rom ] ;

# extra includes for vcc
3RDPARTY = [ FDirName VCC 3rdParty ] ;

# libraries required
SubDirLinkLibs kernel32.lib user32.lib gdi32.lib dsound.lib ddraw.lib ;
SubDirLinkLibs dinput8.lib dxguid.lib winmm.lib shell32.lib comdlg32.lib ;
SubDirLinkLibs comctl32.lib ;
SubDirC++Flags /I$(3RDPARTY) /D_CRT_SECURE_NO_WARNINGS ;
SubDirLinkFlags /SUBSYSTEM:WINDOWS ;

Promote C++FLAGS SUBDIRC++FLAGS : directx opengl : release ;
Promote C++FLAGS SUBDIRC++FLAGS : dbgaudio logging : debug ;

# configuration specific compilation flags
ConfigSubDirC++Flags directx : /DUSE_OPENGL=false ;
ConfigSubDirC++Flags opengl : /DUSE_DIRECTX=false ;
ConfigSubDirC++Flags dbgaudio : /DUSE_DEBUG_AUDIOTAPE=true ;
ConfigSubDirC++Flags logging : /DUSE_LOGGING=true ;

# copy a rom to the configuration output
rule MakeRom
{
	File $(<) : $(>) ;
	Depends $(<) : $(>) ;
	MakeLocate $(<) : $(LOCATE_TARGET) ;
	Depends roms $(cfg) : $(<) ;
	Clean clean : $(<) ;
}

# process all rom files
rule MakeRoms
{
	local rom ;
	for rom in $(ROMS)
	{
		MakeRom [ FGristFiles $(rom:BS) ] : $(rom) ;
	}
	NotFile roms ;
}

rule MakeExtras cfg
{
    # set sources grist based on config
    local SOURCE_GRIST = $(cfg) ;

	MakeRoms $(cfg) ;
}

# build main debug/release versions
ConfigMain $(CONFIGS) : vcc : $(SRCS) ;

# build extras needed
ForEachConfig $(CONFIGS) : MakeExtras ;


rule MakeDllExtras cfg
{
	local SOURCE_GRIST = [ FGrist $(SUBDIR_TOKENS) $(cfg) ] ;

	local target = [ FAppendSuffix [ FGristFiles $(name) ] : $(SUFEXE) ] ;

	SOURCE_GRIST = [ FGrist $(cfg) ] ;

	local out = [ FAppendSuffix [ FGristFiles $(name) ] : $(SUFEXE) ] ;

	File $(out) : $(target) ;
	MakeLocate $(out) : [ FDirName build $(cfg) ] ;
	Depends $(cfg) : $(out) ;
}

rule BuildDll name : shared : libs
{
	SubDir TOP $(name) ;

	local SEARCH_SOURCE = [ FDirName VCC $(name) ] ;
	local SRCS = [ Glob $(SEARCH_SOURCE) : *.c *.cpp *.rc ] ;

	# shared 
	SEARCH_SOURCE += [ FDirName VCC ] ;
	local SHARED = [ Glob VCC : $(shared) ] ;
	SRCS += $(SHARED) ;

	ForEachConfig $(CONFIGS) : SetLocateTarget ;

	# libraries required
	SubDirLinkLibs kernel32.lib user32.lib gdi32.lib dsound.lib ddraw.lib ;
	SubDirLinkLibs dinput8.lib dxguid.lib winmm.lib shell32.lib comdlg32.lib ;
	SubDirLinkLibs comctl32.lib $(libs) ;
	SubDirC++Flags /D_CRT_SECURE_NO_WARNINGS ;
	SubDirLinkFlags /DLL /DYNAMICBASE /SUBSYSTEM:CONSOLE ;

	Promote C++FLAGS SUBDIRC++FLAGS : directx opengl : release ;
	Promote C++FLAGS SUBDIRC++FLAGS : dbgaudio logging : debug ;

	# configuration specific compilation flags
	ConfigSubDirC++Flags directx : /DUSE_OPENGL=false ;
	ConfigSubDirC++Flags opengl : /DUSE_DIRECTX=false ;
	ConfigSubDirC++Flags dbgaudio : /DUSE_DEBUG_AUDIOTAPE=true ;
	ConfigSubDirC++Flags logging : /DUSE_LOGGING=true ;	

	local SUFEXE = .dll ;

	ConfigMain $(CONFIGS) : $(name) : $(SRCS) ;

	ForEachConfig $(CONFIGS) : MakeDllExtras ;
}


#
# Build cart dlls, some require shared sources and additional libraries.
#

BuildDll acia : logger.cpp DialogOps.cpp : ws2_32.lib ;
BuildDll becker : logger.cpp DialogOps.cpp Fileops.cpp : ws2_32.lib ;
BuildDll fd502 : logger.cpp DialogOps.cpp Fileops.cpp : ws2_32.lib ;
BuildDll gmc ;
BuildDll orch90 : Fileops.cpp ;
BuildDll harddisk : DialogOps.cpp Fileops.cpp ;
BuildDll mpi : logger.cpp DialogOps.cpp Fileops.cpp ;
BuildDll ramdisk : logger.cpp DialogOps.cpp Fileops.cpp ;
BuildDll sdc : logger.cpp DialogOps.cpp Fileops.cpp : Shlwapi.lib Ole32.lib ;
BuildDll superide : DialogOps.cpp Fileops.cpp ;


